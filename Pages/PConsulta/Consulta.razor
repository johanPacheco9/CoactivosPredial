@page "/Consultapage"
@using Coactivos_Predial.Models;
@using Coactivos_Predial.Shared.Components;
@using Coactivos_Predial.Shared.Components.ComponentServices.BusquedaService;
@using Coactivos_Predial.Shared.Models;
@using System.Data.Common;
@using System.Diagnostics;
@using Coactivos_Predial.Shared.Services;
@using Coactivos_Predial.Shared.Services.FileHandler;
@using Coactivos_Predial.Shared.Services.SDatabase
@using Coactivos_Predial.Shared.Services.SPropietarios;
@using Microsoft.AspNetCore.Components.Forms;
@using System.Runtime.InteropServices
@using System.Security.Claims
@inject IConfiguration config
@inject IArchivoService _archivoService
@inject IJSRuntime JSRuntime
@inject HttpClient _httpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IConnectionService _connectionService

@inject DialogService dialogService
@inject BusquedaService busquedaService
@inject IPrediosService comparendoService
@inject IpropietariosService propietariosService
@inject NavigationManager NavigationManager
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Coactivos-Predial</title>
</head>
    <body>
    <div class="container-fluid bg-transparent">
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card card-primary card-outline">
                        <div class="card-header p-0" style="background-color: #112366; height:31px;">
                            <h6 class="card-title  ms-2 mt-1" style="color:white">
                                Consulta de Procesos
                            </h6>
                        </div>
                        <div class="card-body mt-0 w-100">
                            <div class="row p-1 mt-0">
                                <div class="form-group p-0">
                                    <EditForm method="post" Model="@comp_obj" class="p-0">
                                        <div class="row mt-0 w-100">
                                            <div class="col ms-2">
                                                <div class="form-group">
                                                    <h4 style="color:gray">No. Predial</h4>
                                                    <div class="input-group">
                                                        <input type="text" @bind="comp_obj.codigo" maxlength="20" class="form-control" id="comparendoBusqueda" name="busqueda" />
                                                        <div class="input-group-append">
                                                            <button @onclick="obtenerLiquidacion" class="btn btn-primary" style="height: 28px; display: inline-flex; align-items: center;">
                                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                                                                    <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
                                                                </svg>
                                                            </button>

                                                            <button @onclick="ShowBusqueda" class="btn btn-primary" style="height:28px;">
                                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-three-dots" viewBox="0 0 16 16">
                                                                    <path d="M3 9.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3m5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3m5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3" />
                                                                </svg>
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-2">
                                                <div class="form-group row">
                                                    <h4 style="color:gray">Tipo Identificación</h4>
                                                    <div>
                                                        <RadzenText TextStyle="TextStyle.Body1" style="font-size:12px" class="rz-color-on-primary-black"><b>@(comp_obj?.ntipo)</b></RadzenText>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-2">
                                                <div class="form-group row">
                                                    <h4 style="color:gray">Documento</h4>
                                                    <div>
                                                        <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-black"><b>@(comp_obj?.cedula)</b></RadzenText>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col">

                                                <div class="form-group row">
                                                    <h4 style="color:gray">Propietaario</h4>
                                                    <div>
                                                        <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-black"><b>@(comp_obj?.nombre)</b></RadzenText>
                                                    </div>

                                                </div>
                                            </div>

                                        </div>
                                    </EditForm>
                                </div>
                            </div>

                            <ul class="nav nav-tabs p-0 me-0" id="custom-content-below-tab" role="tablist">
                                <li class="nav-item">
                                    <button type="button" class="nav-link @(tab1 ? "active" : "")" id="pestañaLiquidacion" data-toggle="pill" href="#contenidoLiquidacion" role="tab" aria-controls="contenidoLiquidacion" aria-selected="true" @onclick="() => displayTabs(1)"><h4>Documentos Anexo</h4></button>
                                </li>
                                <li class="nav-item">
                                    <button type="button" class="nav-link @(tab2 ? "active" : "")" id="pestañaLiquidacion" data-toggle="pill" href="#contenidoLiquidacion" role="tab" aria-controls="contenidoLiquidacion" aria-selected="true" @onclick="() => displayTabs(2)"><h4>Procesos Activos</h4></button>
                                </li>
                                <li class="nav-item">
                                    <button type="button" class="nav-link @(tab3 ? "active" : "")" id="pestañaLiquidacion" data-toggle="pill" href="#contenidoLiquidacion" role="tab" aria-controls="contenidoLiquidacion" aria-selected="true" @onclick="() => displayTabs(3)"><h4>Lista De Propietarios</h4></button>
                                </li>
                            </ul>
                            @if (tab1)
                            {
                                <div class="tab-content" id="custom-content-below-tabContent">
                                    <div class="tab-pane fade show active p-0" id="contenidoLiquidacion" role="tabpanel" aria-labelledby="pestañaLiquidacion">
                                        <div class="row">
                                            <div class="col-sm-8 border-3">
                                                <div class="card">
                                                    <div class="card-body p-0">
                                                        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="false" AllowAlternatingptotalcornecFRows="false" FilterMode="FilterMode.Advanced" AllowGrouping="false" AllowSorting="false" PageSize="5"
                                                                        AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" Data="@listDocs" TItem="Documentos"
                                                                        ColumnWidth="350px" LogicalFilterOperator="LogicalFilterOperator.Or" ShowPagingSummary="true"
                                                                        IsLoading="false">
                                                            <Columns>
                                                                <RadzenDataGridColumn TItem="Documentos" Property="num" Title="Id" Frozen="true" Width="75px" Filterable="false" HeaderCssClass="rz-background-color-primary-lighter radzenHeaderFont" />
                                                                <RadzenDataGridColumn TItem="Documentos" Property="nombre" Title="Nombre Documento" Width="240px" Filterable="false" HeaderCssClass="rz-background-color-primary-lighter" />
                                                                <RadzenDataGridColumn TItem="Documentos" Property="fecha" Title="Fecha Cargue" Width="100px" Filterable="false" HeaderCssClass="rz-background-color-primary-lighter" />
                                                                <RadzenDataGridColumn TItem="Documentos" Property="imagen" Title="Pdf  Eliminar" Width="100px" Filterable="false" TextAlign="TextAlign.Right" HeaderCssClass="rz-background-color-primary-lighter">
                                                                    <Template Context="data">
                                                                        <RadzenButton type="button" Icon="picture_as_pdf" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" class="rz-border-radius-1" Click=@(args => Muestra_Pdf(data.archivo)) Style="margin-top: -2%;"></RadzenButton>
                                                                        <RadzenButton type="button" Icon="delete" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" class="rz-border-radius-1" Click=@(args => PermisoEliminar(data)) Style="margin-top: -2%;"></RadzenButton>
                                                                    </Template>

                                                                </RadzenDataGridColumn>
                                                            </Columns>
                                                        </RadzenDataGrid>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-sm-4">
                                                <div class="container-fluid p-0" style="background-color:#BBCCCD ">
                                                    <div class="row p-2">
                                                        <span style="font-size:13px; font-weight:bold" class="text-black font-weight-bold ms-3 p-1">@(nestado_proc.ToUpper())</span>
                                                    </div>
                                                    <div class="row p-2 pt-0">
                                                        <div class="col">
                                                            <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-black rz-display-flex rz-mt-0 rz-ms-3 rz-mb-0">Area Territorio</RadzenText>
                                                            <span style="font-size:12px; font-weight:bold" class="text-black font-weight-bold rz-ms-3 rz-mb-0">@($"{pfechaFormated} {comp_obj.area_tet}")</span>
                                                        </div>
                                                        <div class="col me-0">
                                                            <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-black rz-display-flex rz-mt-0 rz-mb-0">Area construida</RadzenText>
                                                            <span style="font-weight:bold">@comp_obj.area_con</span>
                                                        </div>
                                                    </div>
                                                    <div class="p-2 mt-0 pb-0" style="background-color:#bcd8ff">
                                                        <div class="row pb-0" style="height:10em;">
                                                            <div class="col me-0">
                                                                <div class="border-radius-2">
                                                                    <dl class="dl-horizontal">
                                                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-black rz-display-flex rz-mt-3 rz-ms-3 rz-mb-0">No Matricula</RadzenText>
                                                                        <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-black rz-ms-3"><b>@(comp_obj.matricula)</b></RadzenText>
                                                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-black rz-display-flex rz-ms-3 rz-mb-0">Zona</RadzenText>
                                                                        <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-black rz-ms-3"><b>@(comp_obj?.zona)</b></RadzenText>
                                                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-black rz-display-flex rz-ms-3 rz-mt-4 rz-mb-0">Exento</RadzenText>
                                                                        <dt><input type="checkbox" class="ms-3" name="check" @(comp_obj.exento) /></dt>
                                                                    </dl>
                                                                </div>
                                                            </div>
                                                            <div class="col me-0 ">
                                                                <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-black rz-display-flex rz-mt-3 rz-mb-0">Avaluo Catastral</RadzenText>
                                                                <RadzenText TextStyle="TextStyle.Body1" class="rz-color-danger"><b>@(comp_obj.avaluo.ToString("C"))</b></RadzenText>
                                                                <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-black rz-display-flex rz-mb-0">Estrato</RadzenText>
                                                                <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-black"><b>@(comp_obj.estrato)</b></RadzenText>
                                                                <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-black rz-display-flex rz-mt-4 rz-mb-0">Predio Municipio</RadzenText>
                                                                <dt><input type="checkbox" class="ms-0" name="check" @(comp_obj.municipio) /></dt>

                                                            </div>
                                                        </div>
                                                        <div class="row p-0 mt-0 ">
                                                            <div class="col mt-0 ">
                                                                <div class="border-radius-2">
                                                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-black rz-display-flex rz-ms-3 rz-mb-0">Direccion</RadzenText>
                                                                    <span class="text-black font-weight-bold rz-ms-3" style="font-size:12px;">@comp_obj.dir</span>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="card-footer">
                                            <div class="row">
                                                <div class="col-6">
                                                    <RadzenButton Click=@(args => MostrarModal()) Disabled="@existe" Text="Cargar Pdf" Icon="picture_as_pdf" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                            @if (tab2)
                            {
                                <section class="content-header">
                                    <section class="content">
                                        <div class="container-fluid">
                                            <div class="row">
                                                <div class="col-12">
                                                    <div class="card">
                                                        <form asp-action="Index" method="get">
                                                            <div class="card-header" style="background-color:#112366; height: 31px;">
                                                                <h2 class="card-title"></h2>
                                                            </div>
                                                        </form>
                                                        <div class="card-body  mt-1">
                                                            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowGrouping="false" AllowSorting="true" PageSize="8"
                                                                            AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" Data="@procesoslist" TItem="Procesos"
                                                                            ColumnWidth="350px" LogicalFilterOperator="LogicalFilterOperator.Or" ShowPagingSummary="true"
                                                                            IsLoading="@isLoading">
                                                                <Columns>
                                                                    <RadzenDataGridColumn TItem="Procesos" Property="id" Title="Expediente" Frozen="true" Width="160px" Filterable="false" HeaderCssClass="rz-background-color-primary-lighter" />
                                                                    <RadzenDataGridColumn TItem="Procesos" Property="resolucion" Title="Resolución" Width="160px" Filterable="false" HeaderCssClass="rz-background-color-primary-lighter" />
                                                                    <RadzenDataGridColumn TItem="Procesos" Property="fecha_mdto" Title="Fecha Mandamiento" Width="200px" Filterable="false" HeaderCssClass="rz-background-color-primary-lighter" />
                                                                    <RadzenDataGridColumn TItem="Procesos" Property="nestado" Title="Estado" Width="120px" Filterable="false" HeaderCssClass="rz-background-color-primary-lighter" />
                                                                    <RadzenDataGridColumn TItem="Procesos" Property="fecha_proc" Title="Fecha Proceso" Width="160px" Filterable="false" HeaderCssClass="rz-background-color-primry-lighter" />
                                                                    <RadzenDataGridColumn TItem="Procesos" Width="80px" FilterValue="false" HeaderCssClass="rz-background-color-primary-lighter">
                                                                    </RadzenDataGridColumn>
                                                                </Columns>
                                                            </RadzenDataGrid>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div><!-- /.container-fluid -->
                                    </section>
                                </section>
                            }
                            @if (tab3)
                            {
                                <section class="content-header">
                                    <section class="content">
                                        <div class="container-fluid">
                                            <div class="row">
                                                <div class="col-12">
                                                    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowGrouping="false" AllowSorting="true" PageSize="6"
                                                                    AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" Data="@propietlist" TItem="Propietarios"
                                                                    ColumnWidth="350px" LogicalFilterOperator="LogicalFilterOperator.Or" ShowPagingSummary="true"
                                                                    IsLoading="@isLoading">
                                                        <Columns>
                                                            <RadzenDataGridColumn TItem="Propietarios" Property="ntipo" Title="Tipo Identificación" Frozen="true" Width="160px" Filterable="false" HeaderCssClass="rz-background-color-primary-lighter" />
                                                            <RadzenDataGridColumn TItem="Propietarios" Property="documento" Title="No Documento" Frozen="true" Width="160px" Filterable="false" HeaderCssClass="rz-background-color-primary-lighter" />
                                                            <RadzenDataGridColumn TItem="Propietarios" Property="nombre" Title="Nombre Propietario" Width="160px" Filterable="false" HeaderCssClass="rz-background-color-primary-lighter" />
                                                            <RadzenDataGridColumn TItem="Procesos" Width="80px" FilterValue="false" HeaderCssClass="rz-background-color-primary-lighter">
                                                            </RadzenDataGridColumn>
                                                        </Columns>
                                                    </RadzenDataGrid>
                                                </div>
                                            </div>
                                        </div><!-- /.container-fluid -->
                                    </section>
                                </section>
                            }
                        </div>
                    </div>
                    <!-- /.card -->
                </div>
            </div>
        </div>
    </div>


    <div class="modal rz-secondary-lightlight" id="detalleModal" tabindex="-1" style="display: @(mostrarModal ? "block" : "none");">
        <div class="modal-dialog modal-lg" style="border-radius: 30px; box-shadow: 0px 8px 16px rgba(12, 12, 12, 0.8);">
            <div class="modal-content" style="border-radius:30px;">
                <div class="modal-header text-white " style="background-color: #3679D3; border-radius: 30px 30px 0 0; overflow: hidden; height:40px;">
                    <h5 class="modal-title">Cargar Documentos Anexos</h5>
                    <RadzenButton type="button" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" class="rz-border-radius-1" Style="margin-top: 1%;">
                        <span>&times;</span>
                    </RadzenButton>
                </div>
                <div class="modal-body bg-light bg-gradient">
                    <div class="row">
                        <div class="col">
                            <div class="form-group">
                                <label>Detalle Documento</label>
                                <input type="text" maxlength="40" class="form-control" @bind="Docsobj.nombre">
                            </div>
                        </div>
                        <div class="col-sm-4">
                            <div class="form-group">
                                <label>Fecha</label>
                                <input type="date" @bind="@Docsobj.fecha" class="form-control">
                            </div>
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col-4">
                            <InputFile Style="Font-size:12px; border-radius:15px; height:35px;" class="btn btn-primary pull-right" OnChange="LoadFiles"></InputFile>
                        </div>
                        <div class="col ms-5">
                            <button type="button" Style="font-size:12px; height:35px; border-radius:15px;" class="btn btn-primary text-white" @onclick="Agregar_Pdf">
                                Escanear Pdf
                            </button>
                        </div>

                        @if (errors.Count > 0)
                        {
                            <h2>Errores</h2>
                            <ul>
                                @foreach (var item in errors)
                                {
                                    <li>@item</li>
                                }
                            </ul>
                        }

                    </div>
                    <hr />

                </div>
                <div class="modal-footer">
                    <div class="row">
                        <div class="col-6">
                            <RadzenButton type="button" Text="Cerrar" Icon="highlight_off" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" class="rz-border-radius-1" Click=@(args => CerrarModal()) Style="margin-top: -2%;"></RadzenButton>
                        </div>
                        <div class="col-6">
                            <RadzenButton type="button" Text="Grabar" Icon="done_all" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" class="rz-border-radius-1" Click=@(args => Agregar_Pdf()) Style="margin-top: -2%;"></RadzenButton>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>       
    </body>


</html>





@code {

    private readonly string _serverIp = "77.37.124.191";

    public Predios comp_obj { get; set; } = new Predios { };
    public List<Procesos> procesoslist { get; set; } = new List<Procesos>();
    public List<Propietarios> propietlist { get; set; } = new List<Propietarios>();
    private List<Documentos> listDocs = new List<Documentos>();
    private Documentos Docsobj = new Documentos();
    public List<Archivo> archivo = new();
    private List<IBrowserFile> loadedFiles = new();

    private long maxFileSize = 1024 * 1024 * 4;
    private int MaxAllowedFiles = 1;
    private List<string> errors = new();
    public string nombreArchivo = "NumeroComparendo";
    public string rutaparaarchivo;

    IQueryable<Procesos> datap;
    IQueryable<Documentos> datacon;
    IQueryable<Propietarios> dataprop;
    bool isLoading = false;
    bool existe = true;
    public string ptotalFormated;
    public string mres;
    public string ptotalconrecFormated;
    public string pfechaFormated;
    private string pcomp;
    public string nentidad;
    public string nestado;
    private string error;
    public string nestado_proc ="";
    private bool mostrarModal;
    private bool tab1 = true;
    private bool tab2 = false;
    private bool tab3 = false;
    public  string xfile;

    // para authenticacion
    private bool userHasAccess = false;
    private string requiredRole = "2";


    private async Task GetPdfs()
    {
        try
        {
            listDocs = await comparendoService.GetPdfsByComp(comp_obj.codigo);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener Conceptos:{ex}");
        }

    }


    private async Task GetRuta_Pdf(InputFileChangeEventArgs e)
    {
        if (e != null && e.File != null)
        {
            var archivo = e.File;
            Console.WriteLine($"Error in obtenerLiquidacion: {archivo.Name}");
        }
    }

    private async Task PermisoEliminar(Documentos docs)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            userHasAccess = user.Claims.Any(c => c.Type == ClaimTypes.Role && c.Value == requiredRole);

            if (userHasAccess)
            {
                await Elimina_Pdf(docs);
            }
            else
            {
                await this.dialogService.Alert("No tienes permisos para eliminar documentos", "Permisos Insuficientes");
            }


        }
    }


    private async Task Elimina_Pdf(Documentos docs)
    {
        var confirmationResult = await this.dialogService.Confirm("¿Está seguro de eliminar el documento?", "Eliminar Documento", new ConfirmOptions { OkButtonText = "Sí", CancelButtonText = "No" }) ?? false;

        if (confirmationResult)
        {
            // Eliminar el documento de la base de datos
            var count = comparendoService.DeleteDocs(docs.id);

            // Eliminar el archivo físico
            try
            {
                if (File.Exists(docs.archivo))
                {
                    File.Delete(docs.archivo);
                    Console.WriteLine($"Archivo {docs.archivo} eliminado correctamente.");
                }
                else
                {
                    Console.WriteLine($"El archivo {docs.archivo} no existe.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al eliminar el archivo {docs.archivo}: {ex.Message}");
                // Manejar el error según sea necesario
            }

            // Actualizar la lista de documentos (si es necesario)
            await GetPdfs();
            StateHasChanged();
        }
    }



    private async Task Agregar_Pdf()
    {
        if (string.IsNullOrEmpty(Docsobj.nombre))
        {
            await dialogService.Alert("Por favor, ingresa el detalle del documento.", "Alerta", new AlertOptions() { OkButtonText = "Ok", Style = "border-radius:30px;" });
            return;
        }
        if (string.IsNullOrEmpty(Docsobj.archivo))
        {
            await dialogService.Alert("Por favor, escoja un documento a cargar.", "Alerta", new AlertOptions() { OkButtonText = "Ok", Style = "border-radius:30px;" });
            return;
        }

        try
        {
            var count = await comparendoService.Add_Docs(Docsobj);

            // Cerrar el modal
            mostrarModal = false;
            await GetPdfs();
            StateHasChanged();

            // Ejecutar el resto del código en segundo plano
            await GuardarArchivoEnSegundoPlano();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error en agregar el pdf:{ex}");
        }
    }

    private async Task GuardarArchivoEnSegundoPlano()
    {
        try
        {
            if (loadedFiles == null || !loadedFiles.Any())
            {
                await dialogService.Alert("No hay archivos cargados.", "Alerta", new AlertOptions() { OkButtonText = "Ok", Style = "border-radius:30px;" });
                return;
            }

            var stringStorage = _connectionService.GetStorageString("FileStorageTemplate").Trim();
            Console.WriteLine($"Ruta para guardar desde la consulta: {stringStorage}");

            foreach (var file in loadedFiles)
            {
                string directoryPath = stringStorage;
                string fullFilePath = Path.Combine(directoryPath, Docsobj.archivo);

                Console.WriteLine($"directoryPath en guardar en segundo plano: {directoryPath}");

                // Asegurarse de que el directorio existe
                if (!Directory.Exists(directoryPath))
                {
                    Directory.CreateDirectory(directoryPath);
                    Console.WriteLine($"Directorio creado: {directoryPath}");
                }

                // Guardar el archivo en el sistema de archivos
                await using FileStream fs = new FileStream(fullFilePath, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
                Console.WriteLine($"Archivo guardado: {fullFilePath}");
            }
        }
        catch (Exception ex)
        {
            await dialogService.Alert($"Error al guardar el archivo en segundo plano: {ex.Message}", "Error", new AlertOptions() { OkButtonText = "Ok", Style = "border-radius:30px;" });
        }
    }



    private async Task obtenercompare()
    {
        try
        {
            string result = busquedaService.ObtenerUltimoComparendoCapturado();
            comp_obj.codigo = result;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al asignar comparendo: {ex.Message}");
        }
    }

    async Task ShowBusqueda()
    {

        await dialogService.OpenAsync<Busqueda>($"Busqueda Comparendos Por Cédula", new Dictionary<string, object>() { },
        new DialogOptions() { Width = "770px", Height = "500px", Style = "border-radius:30px;", Draggable = true, CssClass = "rz-secondary-lighter" });
        obtenercompare();
    }


    private async Task CerrarModalb()
    {
        dialogService.Close();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    public void displayTabs(int TabNumber)
    {
        switch (TabNumber)
        {
            case 1:
                this.tab1 = true;  this.tab2 = false; this.tab3 = false;
                break;
            case 2:
                this.tab1 = false; this.tab2 = true; this.tab3 = false;
                break;
            case 3:
                this.tab1 = false; this.tab3 = true; this.tab2 = false;
                break;
        }

    }

    private async Task obtenerLiquidacion()
    {
        try
        {
            if (string.IsNullOrEmpty(comp_obj.codigo))
            {
                await dialogService.Alert("Por favor, ingresa un valor en el campo comparendo.", "Alerta", new AlertOptions() { OkButtonText = "Ok", Style = "border-radius:30px;" });
                return;
            }
            var result = await comparendoService.GetMultasByComp(comp_obj.codigo.Trim());
            if (result != null)
            {
                comp_obj = result;
                if (comp_obj.exento)
                { nentidad = "Exento"; } 
                else { nentidad = "Normal"; }
                if (comp_obj.estado == 1)
                { nestado = "Pendiente Pago"; } 
                else { nestado = "Cancelado"; }
                //                getprocesos();
                getprop(); existe = false;
                await GetPdfs();
                ptotalconrecFormated = (comp_obj.avaluo).ToString("C");
                displayTabs(1);
            }
            else
            {
                await GetPdfs();
                await dialogService.Alert("Predio No Encontrado, Por Favor Verifique.", "Alerta", new AlertOptions() { OkButtonText = "Ok", Style = "border-radius:30px;" });
                existe = true;
                comp_obj.nombre = ""; comp_obj.cedula = "";
                comp_obj.area_tet = 0;
                comp_obj.area_con = 0;
                comp_obj.dir = ""; comp_obj.matricula=""; comp_obj.zona=""; comp_obj.estrato = "";
                comp_obj.avaluo=0;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in obtenerLiquidacion: {ex.Message}");
            existe = true;
        }
    }

    private async Task getprocesos()
    {
        try
        {
            await ShowLoading();
            procesoslist = await comparendoService.GetCoactivo(comp_obj.codigo);
            datap = procesoslist.AsQueryable();
            nestado_proc = "Estado : Sin Proceso";
            foreach (var item in procesoslist)
            {
                nestado_proc = item.nestado.Trim()+" Resol: "+item.resolucion.Trim() + " Del : " + item.fecha_mdto.ToString("dd/MM/yyyy");
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error en getresoluciones: {ex.Message}");
        }
    }

    private async Task getprop()
    {
        try
        {
            await ShowLoading();
            propietlist = await propietariosService.PropietariosBypredial(comp_obj.codigo);
            dataprop = propietlist.AsQueryable();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error en getprop: {ex.Message}");
        }
    }


    async Task ShowLoading()
    {
        isLoading = true;
        await Task.Yield();
        isLoading = false;
    }

    private void MostrarModal()
    {
        Docsobj = new Documentos();
        Docsobj.fecha = DateTime.Now; Docsobj.codigo_predial = comp_obj.codigo;
        nombreArchivo = comp_obj.codigo;
        mostrarModal = true;
        StateHasChanged(); 
    }

    private void CerrarModal()
    {
        mostrarModal = false;
    }


    //no ha subido nada.

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            errors.Clear();
            if (e.FileCount > MaxAllowedFiles)
            {
                errors.Add($"Supera la cantidad permitida: {MaxAllowedFiles}");
                return;
            }
            loadedFiles.Clear();
            foreach (var file in e.GetMultipleFiles(MaxAllowedFiles))
            {
                try
                {
                    // Obtener el nombre original del archivo sin extensión
                    string originalFileName = Path.GetFileNameWithoutExtension(file.Name);
                    Console.WriteLine($"Original File Name: {originalFileName}");

                    // Obtener la extensión del archivo original
                    string extension = Path.GetExtension(file.Name);
                    Console.WriteLine($"Extension: {extension}");

                    // Generar el nombre del archivo combinando el prefijo, el nombre original y la extensión
                    string newFileName = $"{nombreArchivo}_{originalFileName}{extension}";
                    Console.WriteLine($"New File Name: {newFileName}");

                    Docsobj.archivo = newFileName;

                    loadedFiles.Add(file);
                    Console.WriteLine($"File {file.Name} added to loadedFiles.");
                }
                catch (Exception ex)
                {
                    errors.Add($"{file.Name} error: {ex.Message}");
                    Console.WriteLine($"Error processing file {file.Name}: {ex.Message}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected error in LoadFiles: {ex.Message}");
            throw;
        }
    }





    public async Task GetArchivos()
    {
        try
        {
            Console.WriteLine($"el nombre del archivo{nombreArchivo}");
            var result = await _archivoService.GetFiles(nombreArchivo);

            if (result == null)
            {
                Console.WriteLine("No encontrado");
            }
            else
            {
                archivo = result;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    public async Task Muestra_Pdf(string xfile)
    {
        try
        {
            var result = await _archivoService.GetFiles(xfile);

            Console.WriteLine($"xfile en getarchivos:{xfile}");
            if (result == null || result.Count == 0)
            {
                Console.WriteLine("No se encontraron archivos.");
            }
            else
            {
                foreach (var item in result)
                {
                    await DescargarYAbrirArchivo(item.Name);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task DescargarYAbrirArchivo(string fileName)
    {
        try
        {
            // Construir la URL completa del archivo en el servidor
            string fileUrl = $"{NavigationManager.BaseUri}api/archivos/{fileName}";

            // Descargar el archivo desde el servidor
            var fileBytes = await DescargarArchivo(fileUrl);

            if (fileBytes != null)
            {
                // Crear un DotNetStreamReference para pasar el archivo al método JavaScript
                var contentStream = new DotNetStreamReference(new MemoryStream(fileBytes));

                // Llamar a la función JavaScript para descargar el archivo
                await JSRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, contentStream);

                Console.WriteLine($"Archivo {fileName} descargado y abierto correctamente.");
            }
            else
            {
                Console.WriteLine($"Error: No se pudo descargar el archivo {fileName}.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al descargar y abrir el archivo: {ex.Message}");
        }
    }

    private async Task<byte[]> DescargarArchivo(string fileUrl)
    {
        try
        {
            Console.WriteLine($"Intentando descargar desde {fileUrl}");

            // Usar HttpClient para descargar el archivo
            HttpResponseMessage response = await _httpClient.GetAsync(fileUrl);
            response.EnsureSuccessStatusCode();
            byte[] archivoBytes = await response.Content.ReadAsByteArrayAsync();

            Console.WriteLine($"Archivo descargado correctamente desde {fileUrl}");
            return archivoBytes;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al descargar el archivo: {ex.Message}");
            return null;
        }
    }

    private string GetFileType(string fileName)
    {
        // Ejemplo: Determinar el tipo MIME basado en la extensión del archivo
        if (fileName.EndsWith(".pdf", StringComparison.OrdinalIgnoreCase))
        {
            return "application/pdf";
        }
        else if (fileName.EndsWith(".jpg", StringComparison.OrdinalIgnoreCase) ||
                 fileName.EndsWith(".jpeg", StringComparison.OrdinalIgnoreCase))
        {
            return "image/jpeg";
        }
        else if (fileName.EndsWith(".png", StringComparison.OrdinalIgnoreCase))
        {
            return "image/png";
        }
        else
        {
            return "application/octet-stream"; // Tipo genérico si no se reconoce la extensión
        }
    }

    
}
